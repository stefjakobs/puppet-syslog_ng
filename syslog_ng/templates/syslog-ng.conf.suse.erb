#
## This file is managed by puppet
#
# File format description can be found in syslog-ng.conf(5).
#

options { long_hostnames(off); 
     sync(50); 
     log_fifo_size(10000);
     group("log"); 
     perm(0640); 
};

#
# 'src' is our main source definition. you can add
# more sources driver definitions to it, or define
# your own sources, i.e.:
#
#source my_src { .... };

source src {
   #
   # include internal syslog-ng messages
   # note: the internal() soure is required!
   #
   internal();

   #
   # the following line will be replaced by the
   # socket list generated by SuSEconfig using
   # variables from /etc/sysconfig/syslog:
   #
   #@SuSEconfig_SOCKETS@
   unix-dgram("/dev/log");
        #unix-dgram("/var/lib/dhcp/dev/log");
        #unix-dgram("/var/lib/named/dev/log");
        #unix-dgram("/var/lib/ntp/dev/log");

   #
   # uncomment to process log messages from network:
   #
   #udp(ip("0.0.0.0") port(514));
};


#
# filter definitions
#
filter f_iptables   { facility(kern) and match("IN=") and match("OUT="); };
filter f_console    { (level(warn) and facility(kern) or
                      level(err) and not facility(authpriv)) and
                       not filter(f_iptables);
                    };
filter f_newsnotice { level(notice) and facility(news); };
filter f_newscrit   { level(crit)   and facility(news); };
filter f_newserr    { level(err)    and facility(news); };
filter f_news       { facility(news); };
filter f_sophie     { facility(mail) and program("sophie"); };
filter f_puppet     { facility(daemon) and program("puppet-agent"); };
filter f_savdid     { facility(daemon) and program("savdid"); };                                                                        
filter f_mail       { facility(mail) and not program("sophie") and not program("savdid"); };                                                   
filter f_mail_warn  { level(warn) and filter(f_mail); };
filter f_mail_err   { level(err) and filter(f_mail); };
filter f_saslauthd  { facility(auth) and program("saslauthd"); };
filter f_cron       { facility(cron); };
filter f_warn       { level(warn, err, crit) and not facility(mail) and
                      not filter(f_iptables); 
                    };
filter f_alert      { level(alert); };
filter f_messages   { not facility(cron, news, mail, local5, local7) and
                      not filter(f_iptables) and not filter(f_saslauthd) and                                                                    
                      not filter(f_savdid) and not filter(f_puppet);
                    };
filter f_local      { facility(local0, local1, local2, local3,
                               local4, local6); 
                    };
filter f_named      { facility(local5) and program("named"); };
filter f_dhcpd      { facility(local7) and program("dhcpd"); };
filter f_amavis     { facility(mail) and program("amavis"); };
filter f_sav_ood    { filter(f_amavis) and match("error: The main body of virus data is out of date"); };

#
# Destination logsrv/logsrv2 for mail and dhcp
#
#destination logsrv { udp("192.168.1.59"); };
destination logsrv { tcp("192.168.1.57" port(625)); };
#destination logsrv2 { udp("192.168.1.62"); };
#
# TEST
#
#destination TEST_CONSOLE { file("/var/log/console"); };
#log { source(src); filter(f_console); destination(TEST_CONSOLE); };

#
# print most on tty10 and on the xconsole pipe
#
destination console { file("/dev/tty10"); };
log { source(src); filter(f_console); destination(console); };

destination xconsole { pipe("/dev/xconsole"); };
log { source(src); filter(f_console); destination(xconsole); };

# enable this, if you want that root is informed
# immediately, e.g. of logins
#destination root { usertty("root"); };
#log { source(src); filter(f_alert); destination(root); };


#
# these files are rotated and examined by "news.daily"
#
destination newscrit { file("/var/log/news/news.crit"); };
log { source(src); filter(f_newscrit); destination(newscrit); };

destination newserr { file("/var/log/news/news.err"); };
log { source(src); filter(f_newserr); destination(newserr); };

destination newsnotice { file("/var/log/news/news.notice"); };
log { source(src); filter(f_newsnotice); destination(newserr); };


#
# email-messages in three files
#
destination mail { file("/srv/log/mail/mailrelay/mail" sync(10)); };
log { source(src); filter(f_mail); destination(mail); destination(logsrv); };

destination mail_warn { file("/srv/log/mail/mailrelay/mail.warn"); };
log { source(src); filter(f_mail_warn); destination(mail_warn); };

destination mail_err { file("/srv/log/mail/mailrelay/mail.err"); };
log { source(src); filter(f_mail_err); destination(mail_err); };

#
# sophie messages in one file
#
destination sophie { file("/srv/log/mail/mailrelay/sophie"); };
log { source(src); filter(f_sophie); destination(sophie); destination(logsrv); };

#                                                                                                                                              
# savdid messages in one file                                                                                                                  
#                                                                                                                                              
destination savdid { file("/srv/log/mail/mailrelay/savdid"); };                                                                                
log { source(src); filter(f_savdid); destination(savdid); destination(logsrv); };                                                              

#
# dhcpd in one file
#
destination dhcpd { file("/var/log/dhcpd.log"); };
log { source(src); filter(f_dhcpd); destination(dhcpd); destination(logsrv); };

#
# named in one file
#
destination named { file("/srv/log/mail/mailrelay/named.log"); };
log { source(src); filter(f_named); destination(named); destination(logsrv); };

#                                                                                                                                              
# saslauthd in one file                                                                                                                        
#                                                                                                                                              
destination saslauthd { file("/srv/log/mail/mailrelay/saslauthd"); };                                                                          
log { source(src); filter(f_saslauthd); destination(saslauthd); destination(logsrv); };

#
# puppet in one file
#
destination d_puppet { file("/var/log/puppet/puppet.log"); };
log { source(src); filter(f_puppet); destination(d_puppet); destination(logsrv); };

#
# all cron-messages in one file
#
destination cron { file("/var/log/cron" sync(0)); };
log { source(src); filter(f_cron); destination(cron); };


#
# Some boot scripts require local7
#
destination localmessages { file("/var/log/localmessages"); };
log { source(src); filter(f_local); destination(localmessages); };


#
# all messages except the facilities news and mail
#
destination messages { file("/var/log/messages" sync(0)); };
log { source(src); filter(f_messages); destination(messages); };


#
# enable this, if you want all iptables messages
# in one file
#
destination firewall { file("/srv/log/firewall/mailrelay/firewall" sync(500)); };
log { source(src); filter(f_iptables); destination(firewall); destination(logsrv); };


#
# Warnings in one file
#
destination warn { file("/var/log/warn"); };
log { source(src); filter(f_warn); destination(warn); };

#
# Process amavis logs to find errors
#
destination d_sav_ood { file("/srv/log/mail/mailrelay/sav_out_of_date" group("nagios")); };
log { source(src); filter(f_sav_ood); destination(d_sav_ood); };

#
# enable this, if you want to keep all messages in one file
#destination allmessages { file("/var/log/allmessages"); };
#log { source(src); destination(allmessages); };


################################################
####### Tivoli logfile adapter entry ###########
################################################
#filter f_tivoli_level { level(warning, err, crit, alert, emerg); };
#filter f_tivoli { filter(f_local) or filter(f_tivoli_level) and not filter(f_iptables); };
#destination tivoli_pipe { pipe("/tmp/.tivoli/.tecad_logfile.fifo.testserv."); };
#log { source(src); filter(f_tivoli); destination(tivoli_pipe); };

