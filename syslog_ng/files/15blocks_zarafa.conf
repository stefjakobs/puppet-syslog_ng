# 20blocks_zarafa.conf
# Owner: root
# Group: log

#------------------------------------
###### Start Blocks f√ºr Zarafa ######
#------------------------------------

block root  b_zarafa (src(), prog(), file(), group()) {

   ## Default filter: All in one file
   filter f_`src`_`prog` { program("`prog`"); };
   destination d_`src`_`prog` { file("`file`.log" group("`group`") dir_group("`group`")); };
   log { source(`src`); filter(f_`src`_`prog`); destination(d_`src`_`prog`); };


   ## Filter by log level
   filter f_`src`_`prog`_debug  { filter(f_`src`_`prog`) and level(debug);  };
   filter f_`src`_`prog`_info   { filter(f_`src`_`prog`) and level(info);   };
   filter f_`src`_`prog`_notice { filter(f_`src`_`prog`) and level(notice); };
   filter f_`src`_`prog`_warn   { filter(f_`src`_`prog`) and level(warn);   };
   filter f_`src`_`prog`_err    { filter(f_`src`_`prog`) and level(err);    };
   filter f_`src`_`prog`_crit   { filter(f_`src`_`prog`) and level(crit);   };
   filter f_`src`_`prog`_alert  { filter(f_`src`_`prog`) and level(alert);  };
   filter f_`src`_`prog`_emerg  { filter(f_`src`_`prog`) and level(emerg);  };

   ## Every log level in one file
   destination d_`src`_`prog`_debug {
      file("`file`.debug.log" group("`group`") dir_group("`group`")); };
    destination d_`src`_`prog`_info {
      file("`file`.info.log" group("`group`") dir_group("`group`")); };
   destination d_`src`_`prog`_notice {
      file("`file`.notice.log" group("`group`") dir_group("`group`")); };
   destination d_`src`_`prog`_warn {
      file("`file`.warn.log" group("`group`") dir_group("`group`")); };
   destination d_`src`_`prog`_err {
      file("`file`.err.log" group("`group`") dir_group("`group`")); };
   destination d_`src`_`prog`_crit {
      file("`file`.crit.log" group("`group`") dir_group("`group`")); };
   destination d_`src`_`prog`_alert {
      file("`file`.alert.log" group("`group`") dir_group("`group`")); };
   destination d_`src`_`prog`_emerg {
      file("`file`.emerg.log" group("`group`") dir_group("`group`")); };

   log { source(`src`); filter(f_`src`_`prog`_debug);  destination(d_`src`_`prog`_debug);  };
   log { source(`src`); filter(f_`src`_`prog`_info);   destination(d_`src`_`prog`_info);   };
   log { source(`src`); filter(f_`src`_`prog`_notice); destination(d_`src`_`prog`_notice); };
   log { source(`src`); filter(f_`src`_`prog`_warn);   destination(d_`src`_`prog`_warn);   };
   log { source(`src`); filter(f_`src`_`prog`_err);    destination(d_`src`_`prog`_err);    };
   log { source(`src`); filter(f_`src`_`prog`_crit);   destination(d_`src`_`prog`_crit);   };
   log { source(`src`); filter(f_`src`_`prog`_alert);  destination(d_`src`_`prog`_alert);  };
   log { source(`src`); filter(f_`src`_`prog`_emerg);  destination(d_`src`_`prog`_emerg);  };
};
